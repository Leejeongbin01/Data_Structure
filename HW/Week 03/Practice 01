#include <iostream>
using namespace std;

class Node {
public:
	int data;
	Node* next;

	Node() {
		data = 0;
		next = NULL;
	}
};

class LinkedList {
private:
	Node* head;
	Node* tail;
public:
	LinkedList() {
		head = NULL;
		tail = NULL;
	}
	bool empty() {
		return head == NULL;
	}
	void front() {
		if (empty()) {
			cout << -1 << endl;
		}
		else {
			cout << head->data << endl;
		}
	}
	void addFront(int x) {
		Node* n = new Node;
		n->data = x;
		if (empty()) {
			tail = n;
			n->next = head;
			head = n;
		}
		else {
			n->next = head;
			head = n;
		}
	}
	void removeFront() {
		if (empty()) {
			cout << -1 << endl;
		}
		else {
			Node* tmp = head;
			cout << tmp->data << endl;
			head = head->next;
			delete tmp;
			if (empty()) {
				head = NULL;
				tail = NULL;
			}
		}
	}
	void showList() {
		if (empty()) {
			cout << -1;
		}
		else {
			Node* tmp = head;
			while (tmp != tail) {
				cout << tmp->data << " ";
				tmp = tmp->next;
			}
			if (tmp == tail) {
				cout << tmp->data << endl;
			}
		}
	}
	void addBack(int x) {
		Node* n = new Node;
		n->data = x;
		n->next = NULL;
		if (empty()) {
			head = tail = n;
		}
		else {
			tail->next = n;
			tail = n;
		}
	}
};

int main() {
	int T;
	cin >> T;
	string s;
	int x;
	LinkedList ll;
	while (T--) {
		cin >> s;
		if (s == "empty") {
			if (ll.empty()) {
				cout << 1 << endl;
			}
			else {
				cout << 0 << endl;
			}
		}
		else if (s == "front") {
			ll.front();
		}
		else if (s == "addFront") {
			cin >> x;
			ll.addFront(x);
		}
		else if (s == "removeFront") {
			ll.removeFront();
		}
		else if (s == "showList") {
			ll.showList();
		}
		else if (s == "addBack") {
			cin >> x;
			ll.addBack(x);
		}
	}
	return 0;
}
