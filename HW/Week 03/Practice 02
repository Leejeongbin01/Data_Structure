#include <iostream>
using namespace std;

class Node {
public:
	int data;
	Node* next;

	Node() {
		data = 0;
		next = NULL;
	}
};

class CirList {
private:
	Node* head;
	Node* tail;
public:
	CirList() {
		head = tail = NULL;
	}
	//~CirList() {
	//	if (!empty()) {
	//		Node* n = head;
	//		while (n != tail) {
	//			delete n;

	//		}
	//	}
	//}
	bool empty() {
		return head == NULL;
	}
	void addBack(int x) {
		Node* n = new Node;
		n->data = x;
		n->next = NULL;
		if (empty()) {
			tail = head = n;
			n->next = head;
		}
		else {
			tail->next = n;
			tail = n;
			n->next = head;
		}
	}
	void Delete(int x) {
		// 특정 위치를 잘랐음
		// 위치 전과, 위치 후를 연결해줘야함
		// 자를려는 위치 tmp1, 자르기 전의 위치를 tmp2
		// 처음 머리부터 시작하니깐 tmp1,tmp2를 각각 머리,꼬리(머리 전)로 지정
		Node* tmp1 = head;
		Node* tmp2 = tail;
		for (int i = 0; i < x; i++) {
			tmp1 = tmp1->next;
			tmp2 = tmp2->next;
		}
		// tmp1이 현재 제거해야 할 위치
		// 머리,꼬리,몸통의 경우
		if (tmp1 == head) {
			head = tmp1->next;
			tail->next = head;
			delete tmp1;
		}
		else if (tmp1 == tail) {
			// tail 전 찾고 머리랑 연결
			tail = tmp2;
			tmp2->next = head;
			delete tmp1;
		}
		else {
			tmp2->next = tmp1->next;
			delete tmp1;
		}
	}
	void showList() {
		if (empty()) {
			cout << -1;
		}
		else {
			Node* tmp = head;
			while (tmp != tail) {
				cout << tmp->data << " ";
				tmp = tmp->next;
			}
			if (tmp == tail) {
				cout << tmp->data << endl;
			}
		}
	}
};

int main() {
	int T;
	cin >> T;
	while (T--) {
		CirList cl;
		int x;
		for (int i = 0; i < 10; i++) {
			cin >> x;
			cl.addBack(x);
		}
		string s;

		for (int j = 0; j < 3; j++) {
			cin >> s;
			if (s == "Delete") {
				int x;
				cin >> x;
				cl.Delete(x);
			}
		}
		cl.showList();
	}
	return 0;
}
