#include <iostream>
using namespace std;

class ArrayQueue {
private:
	int* Q;
	int cap;
	int f;
	int r;
	int n;
public:
	ArrayQueue(int size) {
		Q = new int[size];
		cap = size;
		f = 0;
		r = 0;
		n = 0;
	}
	~ArrayQueue() {
		delete Q;
	}
	void enqueue(int x) {
		Q[r] = x;
		r = (r + 1) % cap;
		n++;
	}
	int dequeue() {
		int tmp = Q[f];
		f = (f + 1) % cap;
		n--;
		return tmp;
	}
	void frontadd(int x) {
		Q[f] += x;
	}
};

int main() {
	int T;
	cin >> T;
	for (int i = 0; i < T; i++) {
		int N;
		cin >> N;

		ArrayQueue Q1(N);
		ArrayQueue Q2(N);
		for (int j = 0; j < N; j++) {
			int tmp;
			cin >> tmp;
			Q1.enqueue(tmp);
		}
		for (int j = 0; j < N; j++) {
			int tmp;
			cin >> tmp;
			Q2.enqueue(tmp);
		}
		int cnt1 = 0;
		int cnt2 = 0;
		for (int j = 0; j < N; j++) {
			int a = Q1.dequeue();
			int b = Q2.dequeue();

			if (a > b) {
				cnt1++;
				Q1.frontadd(a - b - 1);
			}
			else if (a < b) {
				cnt2++;
				Q2.frontadd(b - a - 1);
			}
		}
		if (cnt1 == cnt2) {
			cout << 0 << endl;
		}
		else if (cnt1 > cnt2) {
			cout << 1 << endl;
		}
		else {
			cout << 2 << endl;
		}
	}

	return 0;
}

