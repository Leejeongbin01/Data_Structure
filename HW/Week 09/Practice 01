#include <iostream>
#include <vector>
using namespace std;

class Heap {
	vector<int> v;
	int root;
	int n;
public:
	Heap() {
		v.push_back(-1);
		n = 0;
		root = 1;
	}
	void size() {
		cout << n << endl;
	}
	bool isEmpty() {
		return n == 0;
	}
	void swap(int n1, int n2) {
		int tmp = v[n2];
		v[n2] = v[n1];
		v[n1] = tmp;
	}
	void upHeap(int idx) {
		if (v[idx] < v[idx / 2]) {
			swap(idx, idx / 2);
			upHeap(idx / 2);
		}
	}
	void downHeap(int idx) {
		if ((idx * 2) + 1 > n) {
			if (idx * 2 <= n && v[idx] > v[idx * 2]) {
				swap(idx, (idx * 2));
			}
		}
		else {
			if (v[idx * 2] > v[(idx * 2) + 1] && v[idx] > v[(idx * 2) + 1]) {
				swap(idx, (idx * 2) + 1);
				downHeap((idx * 2) + 1);
			}
			else if (v[idx * 2] < v[(idx * 2) + 1] && v[idx] > v[idx * 2]) {
				swap(idx, (idx * 2));
				downHeap(idx * 2);
			}
			else if (v[idx * 2] == v[idx * 2 + 1] && v[idx] > v[idx * 2]) {
				swap(idx, (idx * 2));
				downHeap(idx * 2);
			}
		}
	}
	void insert(int e) {
		if (n == 0) {
			v.push_back(e);
			n++;
		}
		else {
			v.push_back(e);
			n++;
			upHeap(n);
		}
	}
	void top() {
		if (isEmpty()) {
			cout << -1 << endl;
		}
		else {
			cout << v[root] << endl;
		}
	}
	void pop() {
		if (isEmpty()) {
			cout << -1 << endl;
		}
		else {
			int tmp = v[root];
			cout << v[root] << endl;
			v[root] = v[n];
			n--;
			v.pop_back();
			if (n >= 2) {
				downHeap(root);
			}
		}
	}
	void print() {
		if (isEmpty()) {
			cout << -1 << endl;
		}
		else {
			for (int i = 1; i <= n; i++) {
				cout << v[i] << " ";
			}
			cout << endl;
		}
	}
};

int main() {
	int t;
	cin >> t;
	Heap h;
	for (int i = 0; i < t; i++) {
		string s;
		cin >> s;
		if (s == "isEmpty") {
			if (h.isEmpty()) {
				cout << 1 << endl;
			}
			else {
				cout << 0 << endl;
			}
		}
		else if (s == "size") {
			h.size();
		}
		else if (s == "insert") {
			int x;
			cin >> x;
			h.insert(x);
		}
		else if (s == "print") {
			h.print();
		}
		else if (s == "pop") {
			h.pop();
		}
		else if (s == "top") {
			h.top();
		}

	}
	return 0;
}
