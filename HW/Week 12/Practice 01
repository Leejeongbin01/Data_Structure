#include <iostream>
#include <vector>
using namespace std;

#define MAX 353333
#define NOITEM 0
#define ISITEM 1
#define AVAILABLE 2

class cell {
public:
	int key;
	int value;
	int flag;
	cell() {
		key = -1;
		value = -1;
		flag = NOITEM;
	}
	~cell(){}
};
cell hashArr[MAX];
int size = 0;

void tableClear() {
	for (int i = 0; i < MAX; i++) {
		hashArr[i].key = -1;
		hashArr[i].flag = NOITEM;
	}
}

int hashFuc(int idx) {
	return idx % MAX;
}

void insert(int key) {
	int idx = hashFuc(key);
	
	if (hashArr[idx].flag == NOITEM) {
		hashArr[idx].flag = ISITEM;
		hashArr[idx].key = key;
	}
	else {
		while (hashArr[idx].flag != NOITEM) {
			idx = hashFuc(idx + 1);
		}
		hashArr[idx].key = key;
		hashArr[idx].flag = ISITEM;
	}
}
void search(int key) {
	int idx = hashFuc(key);
	int probe = 1;
	
	while (probe != MAX) {
		cell c = hashArr[idx];
		if (c.flag == NULL) {
			cout << 0 << " " << probe << endl;
			break;
		}
		else if (c.key == key) {
			cout << 1 << " " << probe << endl;
			break;
		}
		else {
			idx = hashFuc(idx + 1);
			probe++;
		}
	}
}

int main() {
	int T;
	cin >> T;
	while (T--) {
		int n;
		cin >> n;
		while (n--) {
			int x;
			cin >> x;
			insert(x);
		}
		int m;
		cin >> m;
		while (m--) {
			int x;
			cin >> x;
			search(x);
		}
		tableClear();
	}
	return 0;
}
