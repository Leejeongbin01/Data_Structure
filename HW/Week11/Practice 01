#include <iostream>
#include <vector>
using namespace std;

class Node {
public:
	int key;
	Node* par;
	Node* right;
	Node* left;

	Node(int d) {
		key = d;
		par = right = left = NULL;
	}
};

class BST {
public:
	Node* root;

	BST() {
		root = NULL;
	}
	~BST() {
		destructor(root);
	}
	void destructor(Node* n) {
		if (n == NULL) {
			return;
		}
		if (n->left != NULL) {
			destructor(n->left);
		}
		if (n->right != NULL) {
			destructor(n->right);
		}
		delete n;
	}
	Node* search(Node* cur, int key) {
		if (cur == NULL) {
			return NULL;
		}
		if (cur->key == key) {
			return cur;
		}
		else if (cur->key < key) {
			return search(cur->right, key);
		}
		else {
			return search(cur->left, key);
		}
	}
	void insert(int key) {
		if (search(root, key) != NULL) {
			return; //중복되었으므로
		}
		Node* n = new Node(key);
		if (root == NULL) {
			root = n;
			return;
		}
		Node* cur = root;
		Node* par = NULL;
		while (cur != NULL) {
			par = cur;
			if (cur->key < key) {
				cur = cur->right;
			}
			else {
				cur = cur->left;
			}
		}
		n->par = par;
		if (par->key < key) {
			par->right = n;
		}
		else {
			par->left = n;
		}
	}
	void printDegree(Node* n) {
		Node* tmp = n;
		int cnt = 0;
		if (tmp->left != NULL) {
			cnt++;
		}
		if (tmp->right != NULL) {
			cnt++;
		}
		cout << cnt;
	}
	void printDepth(Node* n) {
		Node* tmp = n;
		int cnt = 0;
		if (tmp == root) {
			cout << 0;
		}
		else {
			while (tmp->par != root) {
				cnt++;
				tmp = tmp->par;
			}
			cnt++;
			cout << cnt;
		}
	}
};

int main() {
	int T;
	cin >> T;

	for (int i = 0; i < T; i++) {
		BST tree;
		int n;
		cin >> n;
		for (int i = 0; i < n; i++) {
			int value;
			cin >> value;
			tree.insert(value);
		}
		int m;
		cin >> m;
		for (int i = 0; i < m; i++) {
			int x;
			cin >> x;
			Node* tmp = tree.search(tree.root,x);
			if (tmp == NULL) {
				cout << 0 << endl;
			}
			else {
				tree.printDegree(tmp);
				cout << " ";
				tree.printDepth(tmp);
				cout << endl;
			}
		}
	}
	return 0;
}
