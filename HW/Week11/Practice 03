#include <iostream>
using namespace std;

class Node {
public:
	int key;
	Node* par;
	Node* right;
	Node* left;

	Node(int key) {
		this->key = key;
		par = right = left = NULL;
	}
};

class BST {
public:
	Node* root;
	int n;

	BST() {
		root = NULL;
		n = 0;
	}
	Node* search(Node* cur,int key) {
		if (cur == NULL) {
			return NULL;
		}
		if (cur->key == key) {
			return cur;
		}
		else if (cur->key < key) {
			return search(cur->right, key);
		}
		else {
			return search(cur->left, key);
		}
	}
	void insert(int key) {
		if (search(root, key) != NULL) {
			return;
		}
		Node* n = new Node(key);
		if (root == NULL) {
			root = n;
			return;
		}
		Node* cur = root;
		Node* par = NULL;
		while (cur != NULL) {
			par = cur;
			if (cur->key < key) {
				cur = cur->right;
			}
			else {
				cur = cur->left;
			}
		}
		n->par = par;
		if (par->key < key) {
			par->right = n;
		}
		else {
			par->left = n;
		}
	}
	void Tran(Node* a, Node* b) {
		if (a->par == NULL) {
			root = b;
		}
		else if (a == a->par->left) {
			a->par->left = b;
		}
		else {
			a->par->right = b;
		}
		if (b != NULL) {
			b->par = a->par;
		}
	}
	Node* find(Node* n) {
		Node* tmp = n;
		Node* cur = NULL;
		while (tmp != NULL) {
			cur = tmp;
			tmp = tmp->left;
		}
		return cur;
	}
	void Delete(int x) {
		Node* n = search(root, x);
		if (n->left == NULL) {
			Tran(n, n->right);
		}
		else if (n->right == NULL) {
			Tran(n, n->left);
		}
		else {
			Node* tmp = find(n->right);
			if (tmp->par != n) {
				Tran(tmp, tmp->right);
				tmp->right = n->right;
				tmp->right->par = tmp;
			}
			Tran(n, tmp);
			tmp->left = n->left;
			tmp->left->par = tmp;
		}
		delete n;
	}
	void preorder(Node* n) {
		if (n == 0) {
			cout << 0 << endl;
		}
		else {
			cout << n->key << " ";
			if (n->left != NULL) {
				preorder(n->left);
			}
			if (n->right != NULL) {
				preorder(n->right);
			}
		}
	}
};

int main() {
	int T;
	cin >> T;
	while (T--) {
		BST t;
		int n;
		cin >> n;
		while (n--) {
			int x; 
			cin >> x;
			t.insert(x);
		}
		int d;
		cin >> d;
		while (d--) {
			int x;
			cin >> x;
			t.Delete(x);
		}
		t.preorder(t.root);
		cout << endl;
		
	}
	return 0;
}
