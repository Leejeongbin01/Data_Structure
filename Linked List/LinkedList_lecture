#include <iostream>
#include <string>
using namespace std;

typedef string Elem;

class StringNode {
private:
	Elem elem;
	StringNode* next;

	friend class StringLinkedList;
};

class StringLinkedList {
private:
	StringNode* head;
	StringNode* tail;
public:
	StringLinkedList() {
		head = NULL;
		tail = NULL;
	}
	~StringLinkedList() {}
	bool empty() const {
		return head == NULL;
	}
	Elem front() const {
		if (!empty()) {
			return head->elem;
		}
		else {
			return "No Data\n";
		}
	}
	void addFront(const Elem& e) {
		StringNode* v = new StringNode;
		if (empty()) {
			tail = v;
		}
		v->elem = e;
		v->next = head;
		head = v;
	}
	void removeFront() {
		if (empty()) {
			return;
		}
		StringNode* old = head;
		head = old->next;
		delete head;
		if (empty()) {
			tail = NULL;
		}
	}
	void addBack(const Elem& e) {
		StringNode* v = new StringNode;
		v->elem = e;
		v->next = NULL;
		if (empty()) {
			head = tail = v;
		}
		else {
			tail->next = v;
			tail = v;
		}
	}
	void removeBack() {
		if (empty()) {
			return;
		}
		StringNode* cur = head;
		if (cur == tail) {
			head = tail = NULL;
			delete cur;
		}
		else {
			while (cur->next != tail) {
				cur = cur->next;
			}
			tail = cur;
			delete tail->next;
			tail->next = NULL;
		}
	}
};
